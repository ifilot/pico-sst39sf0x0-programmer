name: build

on:
  push:
    branches: [ "master", "develop" ]
    tags:
    - 'v*'
  pull_request:
    branches: [ "master", "develop" ]

env:
  BUILD_TYPE: Release
  PROGNAME: pico-sst39sf0x0-programmer
  FIRMWARE: pico-sst39sf0x0-programmer-firmware
  FIRMWARE2: pico2-sst39sf0x0-programmer-firmware
  EXEC: pico-sst39sf0x0-programmer.exe

jobs:
  #
  # (optional) Create release
  #
  create-release:
    runs-on: ubuntu-latest
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  #
  # Windows
  #
  build-gui-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.7.0'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        tools: 'tools_opensslv3_x64'
        modules: 'qtserialport'
        cache: true
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}}/gui -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.EXEC}}
        path: ${{github.workspace}}/build/Release/${{env.EXEC}}
  
  # create packaging metadata
  prepare-installer-windows:
    runs-on: ubuntu-latest
    needs: build-gui-windows
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: install dependencies
      run: sudo apt-get update && sudo apt-get install -y python3 python3-jinja2
    - name: run packaging script
      run: python3 gui/packaging/package.py
    - name: Upload packaging scripts
      uses: actions/upload-artifact@v3
      with:
        name: package-metadata
        path: |
          ${{github.workspace}}/gui/packaging/config/config.xml
          ${{github.workspace}}/gui/packaging/packages/com.vendor.product/meta/installscript.qs
          ${{github.workspace}}/gui/packaging/packages/com.vendor.product/meta/package.xml

  # create Windows installer
  create-installer-windows:
    runs-on: windows-latest
    needs: prepare-installer-windows
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.7.0'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtserialport'
        tools: 'tools_ifw tools_opensslv3_x64'
        cache: true
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{env.EXEC}}
        path: gui/packaging/packages/com.vendor.product/data/
    - name: Download installer metadata
      uses: actions/download-artifact@v3
      with:
        name: package-metadata
        path: ${{github.workspace}}/gui/packaging
    - name: Get dependencies
      run: windeployqt.exe gui\packaging\packages\com.vendor.product\data\${{env.EXEC}} --release --force
    - name: Copy assets
      run: copy gui\assets\icon\eeprom_icon.ico gui\packaging\packages\com.vendor.product\data\eeprom_icon.ico
    - name: Create installer
      run: ${{github.workspace}}\..\Qt\Tools\QtInstallerFramework\4.7\bin\binarycreator.exe -c config\config.xml -p packages ${{env.PROGNAME}}-${{ github.ref }}-installer-win64.exe
      working-directory: gui/packaging
    - name: Upload installer
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.PROGNAME}}-${{ github.ref }}-installer-win64.exe
        path: gui/packaging/${{env.PROGNAME}}-${{ github.ref }}-installer-win64.exe

  # deploy Windows installer
  deploy-installer-windows:
    runs-on: ubuntu-latest
    needs: [create-installer-windows, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{env.PROGNAME}}-installer-win64.exe
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.PROGNAME}}-${{ github.ref }}-installer-win64.exe
        asset_name: ${{env.PROGNAME}}-${{ github.ref }}-installer-win64.exe
        asset_content_type: application/vnd.microsoft.portable-executable

  #
  # Ubuntu
  #
  build-gui-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install packages
      run: sudo apt update && sudo apt install -y qtbase5-dev qt5-qmake libqt5serialport5-dev cmake
    - name: Configure CMake
      run: mkdir ${{github.workspace}}/build && cd ${{github.workspace}}/build && qmake ../gui
    - name: Build
      run: cd ${{github.workspace}}/build && make -j

  #
  # PICO firmware
  #
  build-firmware:
    runs-on: ubuntu-latest
    container:
      image: docker pull ghcr.io/ifilot/pico:v0.2.0
    steps:
    - uses: actions/checkout@v3
    - name: Compile firmware
      shell: bash
      run: |
        mkdir build && cd build
        cmake ../firmware
        make -j
    - name: Upload firmware .uf2 file
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.FIRMWARE}}.uf2
        path: ./build/${{env.FIRMWARE}}.uf2

  deploy-firmware:
    runs-on: ubuntu-latest
    needs: [build-firmware, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{env.FIRMWARE}}.uf2
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.FIRMWARE}}.uf2
        asset_name: ${{env.FIRMWARE}}.uf2
        asset_content_type: application/octet-stream


  #
  # PICO2 firmware
  #
  build-firmware-pico2:
    runs-on: ubuntu-latest
    container:
      image: docker pull ghcr.io/ifilot/pico:v0.2.0
    steps:
    - uses: actions/checkout@v3
    - name: Compile firmware
      shell: bash
      run: |
        mkdir build && cd build
        cmake -DPICO_BOARD=pico2 ../firmware
        make -j
    - name: Upload firmware .uf2 file
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.FIRMWARE2}}.uf2
        path: ./build/${{env.FIRMWARE2}}.uf2

  deploy-firmware-pico2:
    runs-on: ubuntu-latest
    needs: [build-firmware-pico2, create-release]
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{env.FIRMWARE2}}.uf2
        path: ./
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{env.FIRMWARE2}}.uf2
        asset_name: ${{env.FIRMWARE2}}.uf2
        asset_content_type: application/octet-stream